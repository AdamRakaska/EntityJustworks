using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.CSharp;

namespace EntityJustWorks.SQL
{
	/// <summary>
	/// C# Code Generation Class
	/// </summary>
	public static class Code
	{
		/// <summary> 
		/// Generates a C# class code file from a DataTable.
		/// </summary>
		public static string DatatableToCSharp(DataTable Table)
		{
			string className = Table.TableName;

			if (string.IsNullOrWhiteSpace(className))
			{
				return "// Class cannot be created: DataTable.TableName must have a value to use as the name of the class";
			}

			// Create the class
			CodeTypeDeclaration classDeclaration = CreateClass(className);

			// Add public properties
			foreach (DataColumn column in Table.Columns)
			{
				classDeclaration.Members.Add(CreateProperty(column.ColumnName, column.DataType));
			}

			// Add Class to Namespace
			string namespaceName = new StackFrame(2).GetMethod().DeclaringType.Namespace;// "EntityJustWorks.AutoGeneratedClassObject";
			CodeNamespace codeNamespace = new CodeNamespace(namespaceName);
			codeNamespace.Types.Add(classDeclaration);

			// Generate code
			string filename = string.Format("{0}.{1}.cs",namespaceName,className);
			CreateCodeFile(filename, codeNamespace);

			// Return filename
			return filename;
		}

		#region Private Members
		private static CodeTypeDeclaration CreateClass(string name)
		{
			CodeTypeDeclaration result = new CodeTypeDeclaration(name);
			result.Attributes = MemberAttributes.Public;
			result.Members.Add(CreateConstructor(name)); // Add class constructor
			return result;
		}

		private static CodeConstructor CreateConstructor(string className)
		{
			CodeConstructor result = new CodeConstructor();
			result.Attributes = MemberAttributes.Public;
			result.Name = className;
			return result;
		}

		private static CodeMemberField CreateProperty(string name, Type type)
		{
			// This is a little hack. Since you cant create auto properties in CodeDOM,
			//  we make the getter and setter part of the member name.
			// This leaves behind a trailing semicolon that we comment out.
			//  Later, we remove the commented out semicolons.
			string memberName = name + "\t{ get; set; }//";

			CodeMemberField result = new CodeMemberField(type,memberName);
			result.Attributes = MemberAttributes.Public | MemberAttributes.Final;
			return result;
		}

		private static void CreateCodeFile(string filename, CodeNamespace codeNamespace)
		{
			// CodeGeneratorOptions so the output is clean and easy to read
			CodeGeneratorOptions codeOptions = new CodeGeneratorOptions();
			codeOptions.BlankLinesBetweenMembers = false;
			codeOptions.VerbatimOrder = true;
			codeOptions.BracingStyle = "C";
			codeOptions.IndentString = "\t";

			// Create the code file
			using (TextWriter textWriter = new StreamWriter(filename))
			{
				CSharpCodeProvider codeProvider = new CSharpCodeProvider();
				codeProvider.GenerateCodeFromNamespace(codeNamespace, textWriter, codeOptions);
			}

			// Correct our little auto-property 'hack'
			File.WriteAllText(filename, File.ReadAllText(filename).Replace("//;", ""));
		}
		#endregion
	}
}
